
Alarm System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000ac0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f73  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3d  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000852  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ff  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003aaa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <main>
  8a:	0c 94 24 05 	jmp	0xa48	; 0xa48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC_interface.h"

void	ADC_Init	(void)
{
	/*	Enable ADC		*/
	SET_BIT(ADCSRA,7);
  92:	86 b1       	in	r24, 0x06	; 6
  94:	80 68       	ori	r24, 0x80	; 128
  96:	86 b9       	out	0x06, r24	; 6
	#if 	V_Ref == AREF
	CLR_BIT(ADMUX,6);	//REFS0 Pin
	CLR_BIT(ADMUX,7);	//REFS1 Pin
	
	#elif 	V_Ref == AVCC
	SET_BIT(ADMUX,6);	//REFS0 Pin
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);	//REFS1 Pin
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADCSRA,0);	//ADPS0 Pin
	SET_BIT(ADCSRA,1);	//ADPS1 Pin
	SET_BIT(ADCSRA,2);	//ADPS2 Pin

	#elif 	Prescaler == Clock_Div_128
	SET_BIT(ADCSRA,0);	//ADPS0 Pin
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);	//ADPS1 Pin
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);	//ADPS2 Pin
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	86 b9       	out	0x06, r24	; 6
	/*	Interrupt Enable 			*/
	#if 	Interrupt == ON
	SET_BIT(ADCSRA,3);	
	
	#elif 	Interrupt == OFF
	CLR_BIT(ADCSRA,3);
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	86 b9       	out	0x06, r24	; 6
	#else
	#error	"Wrong Choice of ADC Interrupt Enable!"
	#endif
	
	/*	Interrupt Flag	 			*/
	SET_BIT(ADCSRA,4);	//Clear Flag
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	86 b9       	out	0x06, r24	; 6
  c2:	08 95       	ret

000000c4 <ADC_Read>:

	
	
u16		ADC_Read	(u8 Channel)
{
	ADMUX |= (Channel & 0x1f);
  c4:	97 b1       	in	r25, 0x07	; 7
  c6:	8f 71       	andi	r24, 0x1F	; 31
  c8:	98 2b       	or	r25, r24
  ca:	97 b9       	out	0x07, r25	; 7
	
	u16	Local_u16Value = 0;
	
	/*	Start Single Conversion		*/
	SET_BIT(ADCSRA,6);	
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	86 b9       	out	0x06, r24	; 6
	
	/* wait till conversion is done		*/
	while	((GET_BIT(ADCSRA,4)) == 0);
  d2:	34 9b       	sbis	0x06, 4	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <ADC_Read+0xe>
	SET_BIT(ADCSRA,4);	//Clear Flag
  d6:	86 b1       	in	r24, 0x06	; 6
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	86 b9       	out	0x06, r24	; 6
	
	/*	Read The Conversion Value	*/
	Local_u16Value = ADC;
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	95 b1       	in	r25, 0x05	; 5
	
	return Local_u16Value;
  e0:	08 95       	ret

000000e2 <Alarm_System_step>:
void Alarm_System_step(void)
{
  real_T Analog_Value;

  /* Chart: '<Root>/ADC Value & LEDs' */
  if (Alarm_System_DW.is_active_c3_Alarm_System == 0U) {
  e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Alarm_System_DW+0x8>
  e6:	81 11       	cpse	r24, r1
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <Alarm_System_step+0x10>
    Alarm_System_DW.is_active_c3_Alarm_System = 1U;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Alarm_System_DW+0x8>
  f0:	4d c0       	rjmp	.+154    	; 0x18c <Alarm_System_step+0xaa>
  } else {
    if ((Alarm_System_DW.Switch == 1.0) && (Alarm_System_DW.Temperature >= 80.0))
  f2:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Alarm_System_DW+0x4>
  f6:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <Alarm_System_DW+0x5>
  fa:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Alarm_System_DW+0x6>
  fe:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Alarm_System_DW+0x7>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	40 e8       	ldi	r20, 0x80	; 128
 108:	5f e3       	ldi	r21, 0x3F	; 63
 10a:	0e 94 89 03 	call	0x712	; 0x712 <__cmpsf2>
 10e:	81 11       	cpse	r24, r1
 110:	16 c0       	rjmp	.+44     	; 0x13e <Alarm_System_step+0x5c>
 112:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Alarm_System_DW>
 116:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <Alarm_System_DW+0x1>
 11a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Alarm_System_DW+0x2>
 11e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Alarm_System_DW+0x3>
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 ea       	ldi	r20, 0xA0	; 160
 128:	52 e4       	ldi	r21, 0x42	; 66
 12a:	0e 94 b2 04 	call	0x964	; 0x964 <__gesf2>
 12e:	88 23       	and	r24, r24
 130:	34 f0       	brlt	.+12     	; 0x13e <Alarm_System_step+0x5c>
    {
      BuzzerOn();
 132:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <BuzzerOn>
      Led_TurnOn(LED_RED);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 0b 03 	call	0x616	; 0x616 <Led_TurnOn>
 13c:	05 c0       	rjmp	.+10     	; 0x148 <Alarm_System_step+0x66>
    } else {
      BuzzerOff();
 13e:	0e 94 10 01 	call	0x220	; 0x220 <BuzzerOff>
      Led_TurnOff(LED_RED);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 33 03 	call	0x666	; 0x666 <Led_TurnOff>
    }

    Analog_Value = (real_T)ADC_Read(ADC_CHANNEL);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_Read>
 14e:	bc 01       	movw	r22, r24
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 00 04 	call	0x800	; 0x800 <__floatunsisf>
    Alarm_System_DW.Temperature = Analog_Value * 5000.0 / 1024.0 / 10.0;
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e4       	ldi	r19, 0x40	; 64
 15c:	4c e9       	ldi	r20, 0x9C	; 156
 15e:	55 e4       	ldi	r21, 0x45	; 69
 160:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e8       	ldi	r20, 0x80	; 128
 16a:	5a e3       	ldi	r21, 0x3A	; 58
 16c:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e2       	ldi	r20, 0x20	; 32
 176:	51 e4       	ldi	r21, 0x41	; 65
 178:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
 17c:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <Alarm_System_DW>
 180:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <Alarm_System_DW+0x1>
 184:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Alarm_System_DW+0x2>
 188:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Alarm_System_DW+0x3>
  }

  /* End of Chart: '<Root>/ADC Value & LEDs' */

  /* Chart: '<Root>/Swtich State' */
  Alarm_System_DW.Switch = (real_T)ReadSwitch(SWITCH_1);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <ReadSwitch>
 192:	68 2f       	mov	r22, r24
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 00 04 	call	0x800	; 0x800 <__floatunsisf>
 19e:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <Alarm_System_DW+0x4>
 1a2:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <Alarm_System_DW+0x5>
 1a6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Alarm_System_DW+0x6>
 1aa:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <Alarm_System_DW+0x7>
  if (Alarm_System_DW.Switch == 1.0) {
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e8       	ldi	r20, 0x80	; 128
 1b4:	5f e3       	ldi	r21, 0x3F	; 63
 1b6:	0e 94 89 03 	call	0x712	; 0x712 <__cmpsf2>
 1ba:	81 11       	cpse	r24, r1
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <Alarm_System_step+0xe4>
    Led_TurnOn(LED_GREEN);
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 0b 03 	call	0x616	; 0x616 <Led_TurnOn>
 1c4:	08 95       	ret
  } else {
    Led_TurnOff(LED_GREEN);
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 33 03 	call	0x666	; 0x666 <Led_TurnOff>
 1cc:	08 95       	ret

000001ce <Alarm_System_initialize>:
void Alarm_System_initialize(void)
{
  /* Registration code */

  /* initialize error status */
  rtmSetErrorStatus(Alarm_System_M, (NULL));
 1ce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

  /* states (dwork) */
  (void) memset((void *)&Alarm_System_DW, 0,
 1d6:	89 e0       	ldi	r24, 0x09	; 9
 1d8:	e2 e6       	ldi	r30, 0x62	; 98
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	df 01       	movw	r26, r30
 1de:	1d 92       	st	X+, r1
 1e0:	8a 95       	dec	r24
 1e2:	e9 f7       	brne	.-6      	; 0x1de <Alarm_System_initialize+0x10>
 1e4:	08 95       	ret

000001e6 <BuzzerOn>:
#include	"Buzzer.h"
#include	"Dio_interface.h"


void BuzzerOn(void)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <BuzzerOn+0x6>
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <BuzzerOn+0x8>
 1ee:	1f 92       	push	r1
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
	DioConfig DIO;
	DIO.Direction = OUTPUT;
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	8b 83       	std	Y+3, r24	; 0x03
	DIO.Value = HIGH;
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	9c 83       	std	Y+4, r25	; 0x04
	DIO.Port 	= BUZZER_PORT;
 1fc:	89 83       	std	Y+1, r24	; 0x01
	DIO.Pin 	= BUZZER_PIN;
 1fe:	1a 82       	std	Y+2, r1	; 0x02
	DIO_voidSetPinDirection(&DIO);
 200:	ce 01       	movw	r24, r28
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(&DIO);
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	0e 94 31 02 	call	0x462	; 0x462 <DIO_voidSetPinValue>
}
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <BuzzerOff>:
void BuzzerOff(void)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <BuzzerOff+0x6>
 226:	00 d0       	rcall	.+0      	; 0x228 <BuzzerOff+0x8>
 228:	1f 92       	push	r1
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
	DioConfig DIO;
	DIO.Direction = OUTPUT;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	8b 83       	std	Y+3, r24	; 0x03
	DIO.Value = LOW;
 232:	1c 82       	std	Y+4, r1	; 0x04
	DIO.Port 	= BUZZER_PORT;
 234:	89 83       	std	Y+1, r24	; 0x01
	DIO.Pin 	= BUZZER_PIN;
 236:	1a 82       	std	Y+2, r1	; 0x02
	DIO_voidSetPinDirection(&DIO);
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(&DIO);
 240:	ce 01       	movw	r24, r28
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	0e 94 31 02 	call	0x462	; 0x462 <DIO_voidSetPinValue>
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <DIO_voidSetPinDirection>:

#include	"Dio_interface.h"
#include	"Dio_private.h"

void	DIO_voidSetPinDirection(DioConfig *DIO )	//this pin will be used as i/p or o/p
{
 258:	fc 01       	movw	r30, r24
	/*		Range Check				*/
	if( (DIO->Port < NUM_OF_PORTS) && (DIO->Pin < NUM_OF_PINS) )
 25a:	80 81       	ld	r24, Z
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	08 f0       	brcs	.+2      	; 0x262 <DIO_voidSetPinDirection+0xa>
 260:	f5 c0       	rjmp	.+490    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 262:	91 81       	ldd	r25, Z+1	; 0x01
 264:	98 30       	cpi	r25, 0x08	; 8
 266:	08 f0       	brcs	.+2      	; 0x26a <DIO_voidSetPinDirection+0x12>
 268:	f1 c0       	rjmp	.+482    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{
		if(DIO->Direction == OUTPUT)
 26a:	22 81       	ldd	r18, Z+2	; 0x02
 26c:	22 30       	cpi	r18, 0x02	; 2
 26e:	e1 f5       	brne	.+120    	; 0x2e8 <DIO_voidSetPinDirection+0x90>
		{
			switch(DIO->Port)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	99 f0       	breq	.+38     	; 0x29a <DIO_voidSetPinDirection+0x42>
 274:	28 f0       	brcs	.+10     	; 0x280 <DIO_voidSetPinDirection+0x28>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	e9 f0       	breq	.+58     	; 0x2b4 <DIO_voidSetPinDirection+0x5c>
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	41 f1       	breq	.+80     	; 0x2ce <DIO_voidSetPinDirection+0x76>
 27e:	08 95       	ret
			{
				case PORTA :	SET_BIT(HWREG(DDRA_REG),DIO->Pin);	break;
 280:	4a b3       	in	r20, 0x1a	; 26
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_voidSetPinDirection+0x36>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	9a 95       	dec	r25
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_voidSetPinDirection+0x32>
 292:	cb 01       	movw	r24, r22
 294:	84 2b       	or	r24, r20
 296:	8a bb       	out	0x1a, r24	; 26
 298:	08 95       	ret
				case PORTB :	SET_BIT(HWREG(DDRB_REG),DIO->Pin);	break;
 29a:	47 b3       	in	r20, 0x17	; 23
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_voidSetPinDirection+0x50>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	9a 95       	dec	r25
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_voidSetPinDirection+0x4c>
 2ac:	cb 01       	movw	r24, r22
 2ae:	84 2b       	or	r24, r20
 2b0:	87 bb       	out	0x17, r24	; 23
 2b2:	08 95       	ret
				case PORTC :	SET_BIT(HWREG(DDRC_REG),DIO->Pin);	break;
 2b4:	44 b3       	in	r20, 0x14	; 20
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	b9 01       	movw	r22, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinDirection+0x6a>
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	9a 95       	dec	r25
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinDirection+0x66>
 2c6:	cb 01       	movw	r24, r22
 2c8:	84 2b       	or	r24, r20
 2ca:	84 bb       	out	0x14, r24	; 20
 2cc:	08 95       	ret
				case PORTD :	SET_BIT(HWREG(DDRD_REG),DIO->Pin);	break;
 2ce:	41 b3       	in	r20, 0x11	; 17
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	b9 01       	movw	r22, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_voidSetPinDirection+0x84>
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	9a 95       	dec	r25
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_voidSetPinDirection+0x80>
 2e0:	cb 01       	movw	r24, r22
 2e2:	84 2b       	or	r24, r20
 2e4:	81 bb       	out	0x11, r24	; 17
 2e6:	08 95       	ret
				default    :										break;
			}
		}
		
		else if (DIO->Direction == INPUT)
 2e8:	21 11       	cpse	r18, r1
 2ea:	40 c0       	rjmp	.+128    	; 0x36c <DIO_voidSetPinDirection+0x114>
		{
			switch(DIO->Port)
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	a1 f0       	breq	.+40     	; 0x318 <DIO_voidSetPinDirection+0xc0>
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <DIO_voidSetPinDirection+0xa4>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	f9 f0       	breq	.+62     	; 0x334 <DIO_voidSetPinDirection+0xdc>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	59 f1       	breq	.+86     	; 0x350 <DIO_voidSetPinDirection+0xf8>
 2fa:	08 95       	ret
			{
				case PORTA :	CLR_BIT(HWREG(DDRA_REG),DIO->Pin);	break;
 2fc:	4a b3       	in	r20, 0x1a	; 26
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	b9 01       	movw	r22, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_voidSetPinDirection+0xb2>
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	9a 95       	dec	r25
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_voidSetPinDirection+0xae>
 30e:	cb 01       	movw	r24, r22
 310:	80 95       	com	r24
 312:	84 23       	and	r24, r20
 314:	8a bb       	out	0x1a, r24	; 26
 316:	08 95       	ret
				case PORTB :	CLR_BIT(HWREG(DDRB_REG),DIO->Pin);	break;
 318:	47 b3       	in	r20, 0x17	; 23
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	b9 01       	movw	r22, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_voidSetPinDirection+0xce>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	9a 95       	dec	r25
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_voidSetPinDirection+0xca>
 32a:	cb 01       	movw	r24, r22
 32c:	80 95       	com	r24
 32e:	84 23       	and	r24, r20
 330:	87 bb       	out	0x17, r24	; 23
 332:	08 95       	ret
				case PORTC :	CLR_BIT(HWREG(DDRC_REG),DIO->Pin);	break;
 334:	44 b3       	in	r20, 0x14	; 20
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_voidSetPinDirection+0xea>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	9a 95       	dec	r25
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_voidSetPinDirection+0xe6>
 346:	cb 01       	movw	r24, r22
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	84 bb       	out	0x14, r24	; 20
 34e:	08 95       	ret
				case PORTD :	CLR_BIT(HWREG(DDRD_REG),DIO->Pin);	break;
 350:	41 b3       	in	r20, 0x11	; 17
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_voidSetPinDirection+0x106>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	9a 95       	dec	r25
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_voidSetPinDirection+0x102>
 362:	cb 01       	movw	r24, r22
 364:	80 95       	com	r24
 366:	84 23       	and	r24, r20
 368:	81 bb       	out	0x11, r24	; 17
 36a:	08 95       	ret
				default    :										break;
			}			
		}	
		else if (DIO->Direction == INPUT_PULLED_UP)
 36c:	21 30       	cpi	r18, 0x01	; 1
 36e:	09 f0       	breq	.+2      	; 0x372 <DIO_voidSetPinDirection+0x11a>
 370:	77 c0       	rjmp	.+238    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		{
			CLR_BIT(HWREG(SFIOR_REG),PUD_PIN);	//Clear PUD pin in SFIOR to enable pulling up the pin
 372:	80 b7       	in	r24, 0x30	; 48
 374:	8b 7f       	andi	r24, 0xFB	; 251
 376:	80 bf       	out	0x30, r24	; 48
			switch(DIO->Port)
 378:	80 81       	ld	r24, Z
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	f9 f0       	breq	.+62     	; 0x3bc <DIO_voidSetPinDirection+0x164>
 37e:	30 f0       	brcs	.+12     	; 0x38c <DIO_voidSetPinDirection+0x134>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	a1 f1       	breq	.+104    	; 0x3ec <DIO_voidSetPinDirection+0x194>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	09 f4       	brne	.+2      	; 0x38a <DIO_voidSetPinDirection+0x132>
 388:	49 c0       	rjmp	.+146    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 38a:	08 95       	ret
			{
				case PORTA :	CLR_BIT(HWREG(DDRA_REG),DIO->Pin);
 38c:	3a b3       	in	r19, 0x1a	; 26
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	ac 01       	movw	r20, r24
 394:	01 80       	ldd	r0, Z+1	; 0x01
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_voidSetPinDirection+0x144>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_voidSetPinDirection+0x140>
 3a0:	24 2f       	mov	r18, r20
 3a2:	20 95       	com	r18
 3a4:	23 23       	and	r18, r19
 3a6:	2a bb       	out	0x1a, r18	; 26
								SET_BIT(HWREG(PORTA_REG),DIO->Pin);
 3a8:	2b b3       	in	r18, 0x1b	; 27
 3aa:	01 80       	ldd	r0, Z+1	; 0x01
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_voidSetPinDirection+0x15a>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_voidSetPinDirection+0x156>
 3b6:	82 2b       	or	r24, r18
 3b8:	8b bb       	out	0x1b, r24	; 27
								break;
 3ba:	08 95       	ret
				case PORTB :	CLR_BIT(HWREG(DDRB_REG),DIO->Pin);
 3bc:	37 b3       	in	r19, 0x17	; 23
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	ac 01       	movw	r20, r24
 3c4:	01 80       	ldd	r0, Z+1	; 0x01
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_voidSetPinDirection+0x174>
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_voidSetPinDirection+0x170>
 3d0:	24 2f       	mov	r18, r20
 3d2:	20 95       	com	r18
 3d4:	23 23       	and	r18, r19
 3d6:	27 bb       	out	0x17, r18	; 23
								SET_BIT(HWREG(PORTA_REG),DIO->Pin);
 3d8:	2b b3       	in	r18, 0x1b	; 27
 3da:	01 80       	ldd	r0, Z+1	; 0x01
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_voidSetPinDirection+0x18a>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_voidSetPinDirection+0x186>
 3e6:	82 2b       	or	r24, r18
 3e8:	8b bb       	out	0x1b, r24	; 27
								break;
 3ea:	08 95       	ret
				case PORTC :	CLR_BIT(HWREG(DDRC_REG),DIO->Pin);
 3ec:	34 b3       	in	r19, 0x14	; 20
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	01 80       	ldd	r0, Z+1	; 0x01
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_voidSetPinDirection+0x1a4>
 3f8:	44 0f       	add	r20, r20
 3fa:	55 1f       	adc	r21, r21
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_voidSetPinDirection+0x1a0>
 400:	24 2f       	mov	r18, r20
 402:	20 95       	com	r18
 404:	23 23       	and	r18, r19
 406:	24 bb       	out	0x14, r18	; 20
								SET_BIT(HWREG(PORTA_REG),DIO->Pin);
 408:	2b b3       	in	r18, 0x1b	; 27
 40a:	01 80       	ldd	r0, Z+1	; 0x01
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	82 2b       	or	r24, r18
 418:	8b bb       	out	0x1b, r24	; 27
								break;
 41a:	08 95       	ret
				case PORTD :	CLR_BIT(HWREG(DDRD_REG),DIO->Pin);
 41c:	31 b3       	in	r19, 0x11	; 17
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	ac 01       	movw	r20, r24
 424:	01 80       	ldd	r0, Z+1	; 0x01
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	44 0f       	add	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	24 2f       	mov	r18, r20
 432:	20 95       	com	r18
 434:	23 23       	and	r18, r19
 436:	21 bb       	out	0x11, r18	; 17
								SET_BIT(HWREG(PORTA_REG),DIO->Pin);
 438:	2b b3       	in	r18, 0x1b	; 27
 43a:	01 80       	ldd	r0, Z+1	; 0x01
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	82 2b       	or	r24, r18
 448:	8b bb       	out	0x1b, r24	; 27
								break;
 44a:	08 95       	ret
		}
		else{}
	}
	else
	{
		if( DIO->Port >= NUM_OF_PORTS )
 44c:	84 30       	cpi	r24, 0x04	; 4
 44e:	18 f0       	brcs	.+6      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		{
			DIO->Error = Error_WRONG_PORT;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	84 83       	std	Z+4, r24	; 0x04
 454:	08 95       	ret
		}
		else if( DIO->Pin >= NUM_OF_PINS )
 456:	81 81       	ldd	r24, Z+1	; 0x01
 458:	88 30       	cpi	r24, 0x08	; 8
 45a:	10 f0       	brcs	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		{
			DIO->Error = Error_WRONG_PIN;
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	84 83       	std	Z+4, r24	; 0x04
 460:	08 95       	ret

00000462 <DIO_voidSetPinValue>:
		}
		else{}
	}
}
void	DIO_voidSetPinValue(DioConfig *DIO )	//this o/p will high or low
{
 462:	fc 01       	movw	r30, r24
	/*		Range Check				*/
	if( (DIO->Port < NUM_OF_PORTS) && (DIO->Pin < NUM_OF_PINS) )
 464:	80 81       	ld	r24, Z
 466:	84 30       	cpi	r24, 0x04	; 4
 468:	08 f0       	brcs	.+2      	; 0x46c <DIO_voidSetPinValue+0xa>
 46a:	85 c0       	rjmp	.+266    	; 0x576 <DIO_voidSetPinValue+0x114>
 46c:	91 81       	ldd	r25, Z+1	; 0x01
 46e:	98 30       	cpi	r25, 0x08	; 8
 470:	08 f0       	brcs	.+2      	; 0x474 <DIO_voidSetPinValue+0x12>
 472:	81 c0       	rjmp	.+258    	; 0x576 <DIO_voidSetPinValue+0x114>
	{
		if(DIO->Value == HIGH)
 474:	23 81       	ldd	r18, Z+3	; 0x03
 476:	21 30       	cpi	r18, 0x01	; 1
 478:	e1 f5       	brne	.+120    	; 0x4f2 <DIO_voidSetPinValue+0x90>
		{
			switch(DIO->Port)
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	99 f0       	breq	.+38     	; 0x4a4 <DIO_voidSetPinValue+0x42>
 47e:	28 f0       	brcs	.+10     	; 0x48a <DIO_voidSetPinValue+0x28>
 480:	82 30       	cpi	r24, 0x02	; 2
 482:	e9 f0       	breq	.+58     	; 0x4be <DIO_voidSetPinValue+0x5c>
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	41 f1       	breq	.+80     	; 0x4d8 <DIO_voidSetPinValue+0x76>
 488:	08 95       	ret
			{
				case PORTA :	SET_BIT(HWREG(PORTA_REG),DIO->Pin);	break;
 48a:	4b b3       	in	r20, 0x1b	; 27
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	b9 01       	movw	r22, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_voidSetPinValue+0x36>
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	9a 95       	dec	r25
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_voidSetPinValue+0x32>
 49c:	cb 01       	movw	r24, r22
 49e:	84 2b       	or	r24, r20
 4a0:	8b bb       	out	0x1b, r24	; 27
 4a2:	08 95       	ret
				case PORTB :	SET_BIT(HWREG(PORTB_REG),DIO->Pin);	break;
 4a4:	48 b3       	in	r20, 0x18	; 24
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	b9 01       	movw	r22, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_voidSetPinValue+0x50>
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	9a 95       	dec	r25
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_voidSetPinValue+0x4c>
 4b6:	cb 01       	movw	r24, r22
 4b8:	84 2b       	or	r24, r20
 4ba:	88 bb       	out	0x18, r24	; 24
 4bc:	08 95       	ret
				case PORTC :	SET_BIT(HWREG(PORTC_REG),DIO->Pin);	break;
 4be:	45 b3       	in	r20, 0x15	; 21
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	b9 01       	movw	r22, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_voidSetPinValue+0x6a>
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	9a 95       	dec	r25
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_voidSetPinValue+0x66>
 4d0:	cb 01       	movw	r24, r22
 4d2:	84 2b       	or	r24, r20
 4d4:	85 bb       	out	0x15, r24	; 21
 4d6:	08 95       	ret
				case PORTD :	SET_BIT(HWREG(PORTD_REG),DIO->Pin);	break;
 4d8:	42 b3       	in	r20, 0x12	; 18
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_voidSetPinValue+0x84>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	9a 95       	dec	r25
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_voidSetPinValue+0x80>
 4ea:	cb 01       	movw	r24, r22
 4ec:	84 2b       	or	r24, r20
 4ee:	82 bb       	out	0x12, r24	; 18
 4f0:	08 95       	ret
				default    :										break;
			}
		}
		else if (DIO->Value == LOW)
 4f2:	21 11       	cpse	r18, r1
 4f4:	4a c0       	rjmp	.+148    	; 0x58a <DIO_voidSetPinValue+0x128>
		{
			switch(DIO->Port)
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	a1 f0       	breq	.+40     	; 0x522 <DIO_voidSetPinValue+0xc0>
 4fa:	28 f0       	brcs	.+10     	; 0x506 <DIO_voidSetPinValue+0xa4>
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	f9 f0       	breq	.+62     	; 0x53e <DIO_voidSetPinValue+0xdc>
 500:	83 30       	cpi	r24, 0x03	; 3
 502:	59 f1       	breq	.+86     	; 0x55a <DIO_voidSetPinValue+0xf8>
 504:	08 95       	ret
			{
				case PORTA :	CLR_BIT(HWREG(PORTA_REG),DIO->Pin);	break;
 506:	4b b3       	in	r20, 0x1b	; 27
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	b9 01       	movw	r22, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_voidSetPinValue+0xb2>
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	9a 95       	dec	r25
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_voidSetPinValue+0xae>
 518:	cb 01       	movw	r24, r22
 51a:	80 95       	com	r24
 51c:	84 23       	and	r24, r20
 51e:	8b bb       	out	0x1b, r24	; 27
 520:	08 95       	ret
				case PORTB :	CLR_BIT(HWREG(PORTB_REG),DIO->Pin);	break;
 522:	48 b3       	in	r20, 0x18	; 24
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_voidSetPinValue+0xce>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	9a 95       	dec	r25
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_voidSetPinValue+0xca>
 534:	cb 01       	movw	r24, r22
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	88 bb       	out	0x18, r24	; 24
 53c:	08 95       	ret
				case PORTC :	CLR_BIT(HWREG(PORTC_REG),DIO->Pin);	break;
 53e:	45 b3       	in	r20, 0x15	; 21
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	b9 01       	movw	r22, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_voidSetPinValue+0xea>
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	9a 95       	dec	r25
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_voidSetPinValue+0xe6>
 550:	cb 01       	movw	r24, r22
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	85 bb       	out	0x15, r24	; 21
 558:	08 95       	ret
				case PORTD :	CLR_BIT(HWREG(PORTD_REG),DIO->Pin);	break;
 55a:	42 b3       	in	r20, 0x12	; 18
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_voidSetPinValue+0x106>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	9a 95       	dec	r25
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_voidSetPinValue+0x102>
 56c:	cb 01       	movw	r24, r22
 56e:	80 95       	com	r24
 570:	84 23       	and	r24, r20
 572:	82 bb       	out	0x12, r24	; 18
 574:	08 95       	ret
		else{}
				
	}
	else
	{
		if( DIO->Port >= NUM_OF_PORTS )
 576:	84 30       	cpi	r24, 0x04	; 4
 578:	18 f0       	brcs	.+6      	; 0x580 <DIO_voidSetPinValue+0x11e>
		{
			DIO->Error = Error_WRONG_PORT;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	84 83       	std	Z+4, r24	; 0x04
 57e:	08 95       	ret
		}
		else if( DIO->Pin >= NUM_OF_PINS )
 580:	81 81       	ldd	r24, Z+1	; 0x01
 582:	88 30       	cpi	r24, 0x08	; 8
 584:	10 f0       	brcs	.+4      	; 0x58a <DIO_voidSetPinValue+0x128>
		{
			DIO->Error = Error_WRONG_PIN;
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	84 83       	std	Z+4, r24	; 0x04
 58a:	08 95       	ret

0000058c <DIO_u8GetPinValue>:
		else{}
	}
}

u8		DIO_u8GetPinValue(DioConfig *DIO)		//this i/p is high or low
{
 58c:	fc 01       	movw	r30, r24
	u8 Local_u8Value = 0xFF;		//Initial value, it will be edited
	/*		Range Check				*/
	if( (DIO->Port < NUM_OF_PORTS) && (DIO->Pin < NUM_OF_PINS) )
 58e:	80 81       	ld	r24, Z
 590:	84 30       	cpi	r24, 0x04	; 4
 592:	80 f5       	brcc	.+96     	; 0x5f4 <DIO_u8GetPinValue+0x68>
 594:	21 81       	ldd	r18, Z+1	; 0x01
 596:	28 30       	cpi	r18, 0x08	; 8
 598:	68 f5       	brcc	.+90     	; 0x5f4 <DIO_u8GetPinValue+0x68>
	{
		DIO->Error = NO_ErrorS;	//User entered a valid PORT name and PIN number
 59a:	14 82       	std	Z+4, r1	; 0x04
		
		switch(DIO->Port)
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	79 f0       	breq	.+30     	; 0x5be <DIO_u8GetPinValue+0x32>
 5a0:	28 f0       	brcs	.+10     	; 0x5ac <DIO_u8GetPinValue+0x20>
 5a2:	82 30       	cpi	r24, 0x02	; 2
 5a4:	a9 f0       	breq	.+42     	; 0x5d0 <DIO_u8GetPinValue+0x44>
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	e1 f0       	breq	.+56     	; 0x5e2 <DIO_u8GetPinValue+0x56>
 5aa:	31 c0       	rjmp	.+98     	; 0x60e <DIO_u8GetPinValue+0x82>
		{
			case PORTA :	Local_u8Value	=	GET_BIT(HWREG(PINA_REG),DIO->Pin);	break;
 5ac:	89 b3       	in	r24, 0x19	; 25
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_u8GetPinValue+0x2a>
 5b2:	95 95       	asr	r25
 5b4:	87 95       	ror	r24
 5b6:	2a 95       	dec	r18
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_u8GetPinValue+0x26>
 5ba:	81 70       	andi	r24, 0x01	; 1
 5bc:	08 95       	ret
			case PORTB :	Local_u8Value	=	GET_BIT(HWREG(PINB_REG),DIO->Pin);	break;
 5be:	86 b3       	in	r24, 0x16	; 22
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_u8GetPinValue+0x3c>
 5c4:	95 95       	asr	r25
 5c6:	87 95       	ror	r24
 5c8:	2a 95       	dec	r18
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_u8GetPinValue+0x38>
 5cc:	81 70       	andi	r24, 0x01	; 1
 5ce:	08 95       	ret
			case PORTC :	Local_u8Value	=	GET_BIT(HWREG(PINC_REG),DIO->Pin);	break;
 5d0:	83 b3       	in	r24, 0x13	; 19
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_u8GetPinValue+0x4e>
 5d6:	95 95       	asr	r25
 5d8:	87 95       	ror	r24
 5da:	2a 95       	dec	r18
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_u8GetPinValue+0x4a>
 5de:	81 70       	andi	r24, 0x01	; 1
 5e0:	08 95       	ret
			case PORTD :	Local_u8Value	=	GET_BIT(HWREG(PIND_REG),DIO->Pin);	break;
 5e2:	80 b3       	in	r24, 0x10	; 16
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_u8GetPinValue+0x60>
 5e8:	95 95       	asr	r25
 5ea:	87 95       	ror	r24
 5ec:	2a 95       	dec	r18
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_u8GetPinValue+0x5c>
 5f0:	81 70       	andi	r24, 0x01	; 1
 5f2:	08 95       	ret
			default    :															break;
		}		
	}	
	else
	{
		if( DIO->Port >= NUM_OF_PORTS )
 5f4:	84 30       	cpi	r24, 0x04	; 4
 5f6:	20 f0       	brcs	.+8      	; 0x600 <DIO_u8GetPinValue+0x74>
		{
			DIO->Error = Error_WRONG_PORT;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	84 83       	std	Z+4, r24	; 0x04
	}
}

u8		DIO_u8GetPinValue(DioConfig *DIO)		//this i/p is high or low
{
	u8 Local_u8Value = 0xFF;		//Initial value, it will be edited
 5fc:	8f ef       	ldi	r24, 0xFF	; 255
 5fe:	08 95       	ret
	{
		if( DIO->Port >= NUM_OF_PORTS )
		{
			DIO->Error = Error_WRONG_PORT;
		}
		else if( DIO->Pin >= NUM_OF_PINS )
 600:	81 81       	ldd	r24, Z+1	; 0x01
 602:	88 30       	cpi	r24, 0x08	; 8
 604:	30 f0       	brcs	.+12     	; 0x612 <DIO_u8GetPinValue+0x86>
		{
			DIO->Error = Error_WRONG_PIN;
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	84 83       	std	Z+4, r24	; 0x04
	}
}

u8		DIO_u8GetPinValue(DioConfig *DIO)		//this i/p is high or low
{
	u8 Local_u8Value = 0xFF;		//Initial value, it will be edited
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	08 95       	ret
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	08 95       	ret
 612:	8f ef       	ldi	r24, 0xFF	; 255
		}
		else{}
	}
	
	return Local_u8Value ;
}
 614:	08 95       	ret

00000616 <Led_TurnOn>:
#include	"LED.h"
#include	"Dio_interface.h"


unsigned char Led_TurnOn(unsigned char Led_Id)
{
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 d0       	rcall	.+0      	; 0x61c <Led_TurnOn+0x6>
 61c:	00 d0       	rcall	.+0      	; 0x61e <Led_TurnOn+0x8>
 61e:	1f 92       	push	r1
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
	DioConfig DIO;
	DIO.Direction = OUTPUT;
 624:	92 e0       	ldi	r25, 0x02	; 2
 626:	9b 83       	std	Y+3, r25	; 0x03
	DIO.Value = HIGH;
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	9c 83       	std	Y+4, r25	; 0x04
		if (Led_Id==LED_GREEN)
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	29 f4       	brne	.+10     	; 0x63a <Led_TurnOn+0x24>
	{
		DIO.Port 	= LED_GREEN_PORT;
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	89 83       	std	Y+1, r24	; 0x01
		DIO.Pin 	= LED_GREEN_PIN;
 634:	84 e0       	ldi	r24, 0x04	; 4
 636:	8a 83       	std	Y+2, r24	; 0x02
 638:	05 c0       	rjmp	.+10     	; 0x644 <Led_TurnOn+0x2e>
	}

	else if (Led_Id==LED_RED)
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	19 f4       	brne	.+6      	; 0x644 <Led_TurnOn+0x2e>
	{
		DIO.Port 	= LED_RED_PORT;
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	89 83       	std	Y+1, r24	; 0x01
		DIO.Pin 	= LED_RED_PIN;
 642:	8a 83       	std	Y+2, r24	; 0x02
	}
	DIO_voidSetPinDirection(&DIO);
 644:	ce 01       	movw	r24, r28
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(&DIO);
 64c:	ce 01       	movw	r24, r28
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	0e 94 31 02 	call	0x462	; 0x462 <DIO_voidSetPinValue>
	return 0;
}
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <Led_TurnOff>:
unsigned char Led_TurnOff(unsigned char Led_Id)
{
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	00 d0       	rcall	.+0      	; 0x66c <Led_TurnOff+0x6>
 66c:	00 d0       	rcall	.+0      	; 0x66e <Led_TurnOff+0x8>
 66e:	1f 92       	push	r1
 670:	cd b7       	in	r28, 0x3d	; 61
 672:	de b7       	in	r29, 0x3e	; 62
	DioConfig DIO;
	DIO.Direction = OUTPUT;
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	9b 83       	std	Y+3, r25	; 0x03
	DIO.Value = LOW;
 678:	1c 82       	std	Y+4, r1	; 0x04
		if (Led_Id==LED_GREEN)
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	29 f4       	brne	.+10     	; 0x688 <Led_TurnOff+0x22>
	{
		DIO.Port 	= LED_GREEN_PORT;
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	89 83       	std	Y+1, r24	; 0x01
		DIO.Pin 	= LED_GREEN_PIN;
 682:	84 e0       	ldi	r24, 0x04	; 4
 684:	8a 83       	std	Y+2, r24	; 0x02
 686:	05 c0       	rjmp	.+10     	; 0x692 <Led_TurnOff+0x2c>
	}

	else if (Led_Id==LED_RED)
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	19 f4       	brne	.+6      	; 0x692 <Led_TurnOff+0x2c>
	{
		DIO.Port 	= LED_RED_PORT;
 68c:	83 e0       	ldi	r24, 0x03	; 3
 68e:	89 83       	std	Y+1, r24	; 0x01
		DIO.Pin 	= LED_RED_PIN;
 690:	8a 83       	std	Y+2, r24	; 0x02
		
	}
	DIO_voidSetPinDirection(&DIO);
 692:	ce 01       	movw	r24, r28
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(&DIO);
 69a:	ce 01       	movw	r24, r28
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	0e 94 31 02 	call	0x462	; 0x462 <DIO_voidSetPinValue>
	return 0;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <main>:

#include <avr/io.h>

int main(void)
{
	ADC_Init		();
 6b4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	Alarm_System_initialize();
 6b8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Alarm_System_initialize>
    /* Replace with your application code */
    while (1) 
    {
		Alarm_System_step();
 6bc:	0e 94 71 00 	call	0xe2	; 0xe2 <Alarm_System_step>
 6c0:	fd cf       	rjmp	.-6      	; 0x6bc <main+0x8>

000006c2 <ReadSwitch>:
#include	"Dio_interface.h"
#include	"Switch.h"

unsigned char ReadSwitch(unsigned char Switch_Id)
{
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	00 d0       	rcall	.+0      	; 0x6c8 <ReadSwitch+0x6>
 6c8:	00 d0       	rcall	.+0      	; 0x6ca <ReadSwitch+0x8>
 6ca:	1f 92       	push	r1
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
	DioConfig DIO;
	DIO.Direction = INPUT;
 6d0:	1b 82       	std	Y+3, r1	; 0x03
	
	if (Switch_Id==SWITCH_1)
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	21 f4       	brne	.+8      	; 0x6de <ReadSwitch+0x1c>
	{
		DIO.Port = SWITCH_1_PORT;
 6d6:	89 83       	std	Y+1, r24	; 0x01
		DIO.Pin = SWITCH_1_PIN;
 6d8:	82 e0       	ldi	r24, 0x02	; 2
 6da:	8a 83       	std	Y+2, r24	; 0x02
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <ReadSwitch+0x28>
	}

	else if (Switch_Id==SWITCH_2)
 6de:	82 30       	cpi	r24, 0x02	; 2
 6e0:	21 f4       	brne	.+8      	; 0x6ea <ReadSwitch+0x28>
	{
		DIO.Port = SWITCH_2_PORT;
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	89 83       	std	Y+1, r24	; 0x01
		DIO.Pin = SWITCH_2_PIN;
 6e6:	83 e0       	ldi	r24, 0x03	; 3
 6e8:	8a 83       	std	Y+2, r24	; 0x02
	}
	DIO_voidSetPinDirection(&DIO);
 6ea:	ce 01       	movw	r24, r28
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_voidSetPinDirection>
	DIO_u8GetPinValue (&DIO);
 6f2:	ce 01       	movw	r24, r28
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_u8GetPinValue>
	return DIO_u8GetPinValue (&DIO);
 6fa:	ce 01       	movw	r24, r28
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_u8GetPinValue>
}
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <__cmpsf2>:
 712:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_cmp>
 716:	08 f4       	brcc	.+2      	; 0x71a <__cmpsf2+0x8>
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	08 95       	ret

0000071c <__divsf3>:
 71c:	0e 94 a2 03 	call	0x744	; 0x744 <__divsf3x>
 720:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_round>
 724:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_pscB>
 728:	58 f0       	brcs	.+22     	; 0x740 <__divsf3+0x24>
 72a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__fp_pscA>
 72e:	40 f0       	brcs	.+16     	; 0x740 <__divsf3+0x24>
 730:	29 f4       	brne	.+10     	; 0x73c <__divsf3+0x20>
 732:	5f 3f       	cpi	r21, 0xFF	; 255
 734:	29 f0       	breq	.+10     	; 0x740 <__divsf3+0x24>
 736:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_inf>
 73a:	51 11       	cpse	r21, r1
 73c:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_szero>
 740:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_nan>

00000744 <__divsf3x>:
 744:	0e 94 89 04 	call	0x912	; 0x912 <__fp_split3>
 748:	68 f3       	brcs	.-38     	; 0x724 <__divsf3+0x8>

0000074a <__divsf3_pse>:
 74a:	99 23       	and	r25, r25
 74c:	b1 f3       	breq	.-20     	; 0x73a <__divsf3+0x1e>
 74e:	55 23       	and	r21, r21
 750:	91 f3       	breq	.-28     	; 0x736 <__divsf3+0x1a>
 752:	95 1b       	sub	r25, r21
 754:	55 0b       	sbc	r21, r21
 756:	bb 27       	eor	r27, r27
 758:	aa 27       	eor	r26, r26
 75a:	62 17       	cp	r22, r18
 75c:	73 07       	cpc	r23, r19
 75e:	84 07       	cpc	r24, r20
 760:	38 f0       	brcs	.+14     	; 0x770 <__divsf3_pse+0x26>
 762:	9f 5f       	subi	r25, 0xFF	; 255
 764:	5f 4f       	sbci	r21, 0xFF	; 255
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	44 1f       	adc	r20, r20
 76c:	aa 1f       	adc	r26, r26
 76e:	a9 f3       	breq	.-22     	; 0x75a <__divsf3_pse+0x10>
 770:	35 d0       	rcall	.+106    	; 0x7dc <__divsf3_pse+0x92>
 772:	0e 2e       	mov	r0, r30
 774:	3a f0       	brmi	.+14     	; 0x784 <__divsf3_pse+0x3a>
 776:	e0 e8       	ldi	r30, 0x80	; 128
 778:	32 d0       	rcall	.+100    	; 0x7de <__divsf3_pse+0x94>
 77a:	91 50       	subi	r25, 0x01	; 1
 77c:	50 40       	sbci	r21, 0x00	; 0
 77e:	e6 95       	lsr	r30
 780:	00 1c       	adc	r0, r0
 782:	ca f7       	brpl	.-14     	; 0x776 <__divsf3_pse+0x2c>
 784:	2b d0       	rcall	.+86     	; 0x7dc <__divsf3_pse+0x92>
 786:	fe 2f       	mov	r31, r30
 788:	29 d0       	rcall	.+82     	; 0x7dc <__divsf3_pse+0x92>
 78a:	66 0f       	add	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	bb 1f       	adc	r27, r27
 792:	26 17       	cp	r18, r22
 794:	37 07       	cpc	r19, r23
 796:	48 07       	cpc	r20, r24
 798:	ab 07       	cpc	r26, r27
 79a:	b0 e8       	ldi	r27, 0x80	; 128
 79c:	09 f0       	breq	.+2      	; 0x7a0 <__divsf3_pse+0x56>
 79e:	bb 0b       	sbc	r27, r27
 7a0:	80 2d       	mov	r24, r0
 7a2:	bf 01       	movw	r22, r30
 7a4:	ff 27       	eor	r31, r31
 7a6:	93 58       	subi	r25, 0x83	; 131
 7a8:	5f 4f       	sbci	r21, 0xFF	; 255
 7aa:	3a f0       	brmi	.+14     	; 0x7ba <__divsf3_pse+0x70>
 7ac:	9e 3f       	cpi	r25, 0xFE	; 254
 7ae:	51 05       	cpc	r21, r1
 7b0:	78 f0       	brcs	.+30     	; 0x7d0 <__divsf3_pse+0x86>
 7b2:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_inf>
 7b6:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_szero>
 7ba:	5f 3f       	cpi	r21, 0xFF	; 255
 7bc:	e4 f3       	brlt	.-8      	; 0x7b6 <__divsf3_pse+0x6c>
 7be:	98 3e       	cpi	r25, 0xE8	; 232
 7c0:	d4 f3       	brlt	.-12     	; 0x7b6 <__divsf3_pse+0x6c>
 7c2:	86 95       	lsr	r24
 7c4:	77 95       	ror	r23
 7c6:	67 95       	ror	r22
 7c8:	b7 95       	ror	r27
 7ca:	f7 95       	ror	r31
 7cc:	9f 5f       	subi	r25, 0xFF	; 255
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__divsf3_pse+0x78>
 7d0:	88 0f       	add	r24, r24
 7d2:	91 1d       	adc	r25, r1
 7d4:	96 95       	lsr	r25
 7d6:	87 95       	ror	r24
 7d8:	97 f9       	bld	r25, 7
 7da:	08 95       	ret
 7dc:	e1 e0       	ldi	r30, 0x01	; 1
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	bb 1f       	adc	r27, r27
 7e6:	62 17       	cp	r22, r18
 7e8:	73 07       	cpc	r23, r19
 7ea:	84 07       	cpc	r24, r20
 7ec:	ba 07       	cpc	r27, r26
 7ee:	20 f0       	brcs	.+8      	; 0x7f8 <__divsf3_pse+0xae>
 7f0:	62 1b       	sub	r22, r18
 7f2:	73 0b       	sbc	r23, r19
 7f4:	84 0b       	sbc	r24, r20
 7f6:	ba 0b       	sbc	r27, r26
 7f8:	ee 1f       	adc	r30, r30
 7fa:	88 f7       	brcc	.-30     	; 0x7de <__divsf3_pse+0x94>
 7fc:	e0 95       	com	r30
 7fe:	08 95       	ret

00000800 <__floatunsisf>:
 800:	e8 94       	clt
 802:	09 c0       	rjmp	.+18     	; 0x816 <__floatsisf+0x12>

00000804 <__floatsisf>:
 804:	97 fb       	bst	r25, 7
 806:	3e f4       	brtc	.+14     	; 0x816 <__floatsisf+0x12>
 808:	90 95       	com	r25
 80a:	80 95       	com	r24
 80c:	70 95       	com	r23
 80e:	61 95       	neg	r22
 810:	7f 4f       	sbci	r23, 0xFF	; 255
 812:	8f 4f       	sbci	r24, 0xFF	; 255
 814:	9f 4f       	sbci	r25, 0xFF	; 255
 816:	99 23       	and	r25, r25
 818:	a9 f0       	breq	.+42     	; 0x844 <__floatsisf+0x40>
 81a:	f9 2f       	mov	r31, r25
 81c:	96 e9       	ldi	r25, 0x96	; 150
 81e:	bb 27       	eor	r27, r27
 820:	93 95       	inc	r25
 822:	f6 95       	lsr	r31
 824:	87 95       	ror	r24
 826:	77 95       	ror	r23
 828:	67 95       	ror	r22
 82a:	b7 95       	ror	r27
 82c:	f1 11       	cpse	r31, r1
 82e:	f8 cf       	rjmp	.-16     	; 0x820 <__floatsisf+0x1c>
 830:	fa f4       	brpl	.+62     	; 0x870 <__stack+0x11>
 832:	bb 0f       	add	r27, r27
 834:	11 f4       	brne	.+4      	; 0x83a <__floatsisf+0x36>
 836:	60 ff       	sbrs	r22, 0
 838:	1b c0       	rjmp	.+54     	; 0x870 <__stack+0x11>
 83a:	6f 5f       	subi	r22, 0xFF	; 255
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	16 c0       	rjmp	.+44     	; 0x870 <__stack+0x11>
 844:	88 23       	and	r24, r24
 846:	11 f0       	breq	.+4      	; 0x84c <__floatsisf+0x48>
 848:	96 e9       	ldi	r25, 0x96	; 150
 84a:	11 c0       	rjmp	.+34     	; 0x86e <__stack+0xf>
 84c:	77 23       	and	r23, r23
 84e:	21 f0       	breq	.+8      	; 0x858 <__floatsisf+0x54>
 850:	9e e8       	ldi	r25, 0x8E	; 142
 852:	87 2f       	mov	r24, r23
 854:	76 2f       	mov	r23, r22
 856:	05 c0       	rjmp	.+10     	; 0x862 <__stack+0x3>
 858:	66 23       	and	r22, r22
 85a:	71 f0       	breq	.+28     	; 0x878 <__stack+0x19>
 85c:	96 e8       	ldi	r25, 0x86	; 134
 85e:	86 2f       	mov	r24, r22
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	2a f0       	brmi	.+10     	; 0x870 <__stack+0x11>
 866:	9a 95       	dec	r25
 868:	66 0f       	add	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	da f7       	brpl	.-10     	; 0x866 <__stack+0x7>
 870:	88 0f       	add	r24, r24
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__fp_cmp>:
 87a:	99 0f       	add	r25, r25
 87c:	00 08       	sbc	r0, r0
 87e:	55 0f       	add	r21, r21
 880:	aa 0b       	sbc	r26, r26
 882:	e0 e8       	ldi	r30, 0x80	; 128
 884:	fe ef       	ldi	r31, 0xFE	; 254
 886:	16 16       	cp	r1, r22
 888:	17 06       	cpc	r1, r23
 88a:	e8 07       	cpc	r30, r24
 88c:	f9 07       	cpc	r31, r25
 88e:	c0 f0       	brcs	.+48     	; 0x8c0 <__fp_cmp+0x46>
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	e4 07       	cpc	r30, r20
 896:	f5 07       	cpc	r31, r21
 898:	98 f0       	brcs	.+38     	; 0x8c0 <__fp_cmp+0x46>
 89a:	62 1b       	sub	r22, r18
 89c:	73 0b       	sbc	r23, r19
 89e:	84 0b       	sbc	r24, r20
 8a0:	95 0b       	sbc	r25, r21
 8a2:	39 f4       	brne	.+14     	; 0x8b2 <__fp_cmp+0x38>
 8a4:	0a 26       	eor	r0, r26
 8a6:	61 f0       	breq	.+24     	; 0x8c0 <__fp_cmp+0x46>
 8a8:	23 2b       	or	r18, r19
 8aa:	24 2b       	or	r18, r20
 8ac:	25 2b       	or	r18, r21
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <__fp_cmp+0x3e>
 8b0:	08 95       	ret
 8b2:	0a 26       	eor	r0, r26
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <__fp_cmp+0x3e>
 8b6:	a1 40       	sbci	r26, 0x01	; 1
 8b8:	a6 95       	lsr	r26
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	81 1d       	adc	r24, r1
 8be:	81 1d       	adc	r24, r1
 8c0:	08 95       	ret

000008c2 <__fp_inf>:
 8c2:	97 f9       	bld	r25, 7
 8c4:	9f 67       	ori	r25, 0x7F	; 127
 8c6:	80 e8       	ldi	r24, 0x80	; 128
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	08 95       	ret

000008ce <__fp_nan>:
 8ce:	9f ef       	ldi	r25, 0xFF	; 255
 8d0:	80 ec       	ldi	r24, 0xC0	; 192
 8d2:	08 95       	ret

000008d4 <__fp_pscA>:
 8d4:	00 24       	eor	r0, r0
 8d6:	0a 94       	dec	r0
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	18 06       	cpc	r1, r24
 8de:	09 06       	cpc	r0, r25
 8e0:	08 95       	ret

000008e2 <__fp_pscB>:
 8e2:	00 24       	eor	r0, r0
 8e4:	0a 94       	dec	r0
 8e6:	12 16       	cp	r1, r18
 8e8:	13 06       	cpc	r1, r19
 8ea:	14 06       	cpc	r1, r20
 8ec:	05 06       	cpc	r0, r21
 8ee:	08 95       	ret

000008f0 <__fp_round>:
 8f0:	09 2e       	mov	r0, r25
 8f2:	03 94       	inc	r0
 8f4:	00 0c       	add	r0, r0
 8f6:	11 f4       	brne	.+4      	; 0x8fc <__fp_round+0xc>
 8f8:	88 23       	and	r24, r24
 8fa:	52 f0       	brmi	.+20     	; 0x910 <__fp_round+0x20>
 8fc:	bb 0f       	add	r27, r27
 8fe:	40 f4       	brcc	.+16     	; 0x910 <__fp_round+0x20>
 900:	bf 2b       	or	r27, r31
 902:	11 f4       	brne	.+4      	; 0x908 <__fp_round+0x18>
 904:	60 ff       	sbrs	r22, 0
 906:	04 c0       	rjmp	.+8      	; 0x910 <__fp_round+0x20>
 908:	6f 5f       	subi	r22, 0xFF	; 255
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	08 95       	ret

00000912 <__fp_split3>:
 912:	57 fd       	sbrc	r21, 7
 914:	90 58       	subi	r25, 0x80	; 128
 916:	44 0f       	add	r20, r20
 918:	55 1f       	adc	r21, r21
 91a:	59 f0       	breq	.+22     	; 0x932 <__fp_splitA+0x10>
 91c:	5f 3f       	cpi	r21, 0xFF	; 255
 91e:	71 f0       	breq	.+28     	; 0x93c <__fp_splitA+0x1a>
 920:	47 95       	ror	r20

00000922 <__fp_splitA>:
 922:	88 0f       	add	r24, r24
 924:	97 fb       	bst	r25, 7
 926:	99 1f       	adc	r25, r25
 928:	61 f0       	breq	.+24     	; 0x942 <__fp_splitA+0x20>
 92a:	9f 3f       	cpi	r25, 0xFF	; 255
 92c:	79 f0       	breq	.+30     	; 0x94c <__fp_splitA+0x2a>
 92e:	87 95       	ror	r24
 930:	08 95       	ret
 932:	12 16       	cp	r1, r18
 934:	13 06       	cpc	r1, r19
 936:	14 06       	cpc	r1, r20
 938:	55 1f       	adc	r21, r21
 93a:	f2 cf       	rjmp	.-28     	; 0x920 <__fp_split3+0xe>
 93c:	46 95       	lsr	r20
 93e:	f1 df       	rcall	.-30     	; 0x922 <__fp_splitA>
 940:	08 c0       	rjmp	.+16     	; 0x952 <__fp_splitA+0x30>
 942:	16 16       	cp	r1, r22
 944:	17 06       	cpc	r1, r23
 946:	18 06       	cpc	r1, r24
 948:	99 1f       	adc	r25, r25
 94a:	f1 cf       	rjmp	.-30     	; 0x92e <__fp_splitA+0xc>
 94c:	86 95       	lsr	r24
 94e:	71 05       	cpc	r23, r1
 950:	61 05       	cpc	r22, r1
 952:	08 94       	sec
 954:	08 95       	ret

00000956 <__fp_zero>:
 956:	e8 94       	clt

00000958 <__fp_szero>:
 958:	bb 27       	eor	r27, r27
 95a:	66 27       	eor	r22, r22
 95c:	77 27       	eor	r23, r23
 95e:	cb 01       	movw	r24, r22
 960:	97 f9       	bld	r25, 7
 962:	08 95       	ret

00000964 <__gesf2>:
 964:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_cmp>
 968:	08 f4       	brcc	.+2      	; 0x96c <__gesf2+0x8>
 96a:	8f ef       	ldi	r24, 0xFF	; 255
 96c:	08 95       	ret

0000096e <__mulsf3>:
 96e:	0e 94 ca 04 	call	0x994	; 0x994 <__mulsf3x>
 972:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_round>
 976:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__fp_pscA>
 97a:	38 f0       	brcs	.+14     	; 0x98a <__mulsf3+0x1c>
 97c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_pscB>
 980:	20 f0       	brcs	.+8      	; 0x98a <__mulsf3+0x1c>
 982:	95 23       	and	r25, r21
 984:	11 f0       	breq	.+4      	; 0x98a <__mulsf3+0x1c>
 986:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_inf>
 98a:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_nan>
 98e:	11 24       	eor	r1, r1
 990:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_szero>

00000994 <__mulsf3x>:
 994:	0e 94 89 04 	call	0x912	; 0x912 <__fp_split3>
 998:	70 f3       	brcs	.-36     	; 0x976 <__mulsf3+0x8>

0000099a <__mulsf3_pse>:
 99a:	95 9f       	mul	r25, r21
 99c:	c1 f3       	breq	.-16     	; 0x98e <__mulsf3+0x20>
 99e:	95 0f       	add	r25, r21
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	55 1f       	adc	r21, r21
 9a4:	62 9f       	mul	r22, r18
 9a6:	f0 01       	movw	r30, r0
 9a8:	72 9f       	mul	r23, r18
 9aa:	bb 27       	eor	r27, r27
 9ac:	f0 0d       	add	r31, r0
 9ae:	b1 1d       	adc	r27, r1
 9b0:	63 9f       	mul	r22, r19
 9b2:	aa 27       	eor	r26, r26
 9b4:	f0 0d       	add	r31, r0
 9b6:	b1 1d       	adc	r27, r1
 9b8:	aa 1f       	adc	r26, r26
 9ba:	64 9f       	mul	r22, r20
 9bc:	66 27       	eor	r22, r22
 9be:	b0 0d       	add	r27, r0
 9c0:	a1 1d       	adc	r26, r1
 9c2:	66 1f       	adc	r22, r22
 9c4:	82 9f       	mul	r24, r18
 9c6:	22 27       	eor	r18, r18
 9c8:	b0 0d       	add	r27, r0
 9ca:	a1 1d       	adc	r26, r1
 9cc:	62 1f       	adc	r22, r18
 9ce:	73 9f       	mul	r23, r19
 9d0:	b0 0d       	add	r27, r0
 9d2:	a1 1d       	adc	r26, r1
 9d4:	62 1f       	adc	r22, r18
 9d6:	83 9f       	mul	r24, r19
 9d8:	a0 0d       	add	r26, r0
 9da:	61 1d       	adc	r22, r1
 9dc:	22 1f       	adc	r18, r18
 9de:	74 9f       	mul	r23, r20
 9e0:	33 27       	eor	r19, r19
 9e2:	a0 0d       	add	r26, r0
 9e4:	61 1d       	adc	r22, r1
 9e6:	23 1f       	adc	r18, r19
 9e8:	84 9f       	mul	r24, r20
 9ea:	60 0d       	add	r22, r0
 9ec:	21 1d       	adc	r18, r1
 9ee:	82 2f       	mov	r24, r18
 9f0:	76 2f       	mov	r23, r22
 9f2:	6a 2f       	mov	r22, r26
 9f4:	11 24       	eor	r1, r1
 9f6:	9f 57       	subi	r25, 0x7F	; 127
 9f8:	50 40       	sbci	r21, 0x00	; 0
 9fa:	9a f0       	brmi	.+38     	; 0xa22 <__mulsf3_pse+0x88>
 9fc:	f1 f0       	breq	.+60     	; 0xa3a <__mulsf3_pse+0xa0>
 9fe:	88 23       	and	r24, r24
 a00:	4a f0       	brmi	.+18     	; 0xa14 <__mulsf3_pse+0x7a>
 a02:	ee 0f       	add	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	bb 1f       	adc	r27, r27
 a08:	66 1f       	adc	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	91 50       	subi	r25, 0x01	; 1
 a10:	50 40       	sbci	r21, 0x00	; 0
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__mulsf3_pse+0x64>
 a14:	9e 3f       	cpi	r25, 0xFE	; 254
 a16:	51 05       	cpc	r21, r1
 a18:	80 f0       	brcs	.+32     	; 0xa3a <__mulsf3_pse+0xa0>
 a1a:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_inf>
 a1e:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_szero>
 a22:	5f 3f       	cpi	r21, 0xFF	; 255
 a24:	e4 f3       	brlt	.-8      	; 0xa1e <__mulsf3_pse+0x84>
 a26:	98 3e       	cpi	r25, 0xE8	; 232
 a28:	d4 f3       	brlt	.-12     	; 0xa1e <__mulsf3_pse+0x84>
 a2a:	86 95       	lsr	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	b7 95       	ror	r27
 a32:	f7 95       	ror	r31
 a34:	e7 95       	ror	r30
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c1 f7       	brne	.-16     	; 0xa2a <__mulsf3_pse+0x90>
 a3a:	fe 2b       	or	r31, r30
 a3c:	88 0f       	add	r24, r24
 a3e:	91 1d       	adc	r25, r1
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <_exit>:
 a48:	f8 94       	cli

00000a4a <__stop_program>:
 a4a:	ff cf       	rjmp	.-2      	; 0xa4a <__stop_program>
